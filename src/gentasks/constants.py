TASK_TEXT = """Перед вами стоит задача составить генератор,\
выполняющий несколько действий.\
 Некоторые действия будут требовать аргументов.\
 Они будут передаваться в функцию кортежом в соответствии\
 с очередью действий. Там, где они не требуются, передаётся пустой кортёж"""

NOTES = {
    ".send()": "Для выполнения задания требуется понимание метода .send()",
    ".throw()": "Для выполнения задания требуется понимание метода .throw()"
}

GENERATORS_DESCRIPTION = {
    "Range": (
        "Возврат целых чисел от {аргумент 1} до {аргумент 2} "
        "(не включительно). Оба аргумента гарантированно"
        " типа int. Первый аргумент гарантированно меньше второго"),
    "NegativeRange": (
        "Возврат значений от {аргумент 1} до {аргумент 2} (не включительно)"
        "в обратном порядке."
        " Оба аргумента гарантированно типа int. Первый аргумент "
        "гарантированно больше второго"),
    "AwaitKeyword": (
        "Бесконечный цикл без возврата значений (возврат None)"
        " до получения ключевого слова {аргумент 1}. Аргумент"
        "гарантированно типа str"),
    "Iterator": (
        "Возврат значений из переданной последовательности {аргумент 1}."
        " Аргумент гарантированно является итерируемым"),
    "Fibonacci": "Возврат значений из последовательности Фибоначчи до"
                 "получения исключения StopIteration"
}


MAX_LOOP_TESTS = 100
